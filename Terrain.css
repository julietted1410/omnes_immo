dhdbdbdb
dndbdbdbdn
dnfbfbfbd
djjdjdjeje
bdhdbdbej
bfhdbe
#include <WiFi.h>
#include <WebServer.h>

// Pins moteurs
#define IN1_G 17
#define IN2_G 16
#define EN_G  4
#define IN1_D 19
#define IN2_D 18
#define EN_D  23

// Pins encodeurs
#define ENC_G_CH_A 32
#define ENC_D_CH_A 27

volatile long ticksG = 0;
volatile long ticksD = 0;

const char* ssid = "GyroBot_WIFI";
const char* password = "12345678";

WebServer server(80);

long objectifTicks = 1500; // Nombre de ticks à atteindre
bool tourEnCours = false;

void IRAM_ATTR onTickG() { ticksG++; }
void IRAM_ATTR onTickD() { ticksD++; }

void faireTour() {
  ticksG = 0;
  ticksD = 0;
  tourEnCours = true;

  digitalWrite(IN1_G, HIGH); digitalWrite(IN2_G, LOW);
  digitalWrite(IN1_D, LOW);  digitalWrite(IN2_D, HIGH);
  analogWrite(EN_G, 255);
  analogWrite(EN_D, 255);
}

void arreter() {
  digitalWrite(IN1_G, LOW); digitalWrite(IN2_G, LOW);
  digitalWrite(IN1_D, LOW); digitalWrite(IN2_D, LOW);
  analogWrite(EN_G, 0);
  analogWrite(EN_D, 0);
  tourEnCours = false;
}

void handleRoot() {
  String page = "<html><body><h1>Mesure de Ticks - Tour Complet</h1>"
                "<form action=\"/tour\" method=\"get\">"
                "Objectif Ticks : <input type=\"number\" name=\"ticks\" value=\"" + String(objectifTicks) + "\">"
                "<input type=\"submit\" value=\"Lancer le tour\">"
                "</form>"
                "<p><a href=\"/stop\"><button>Stop</button></a></p>"
                "<h2>Ticks Actuels :</h2>"
                "<p>Gauche : " + String(ticksG) + "</p>"
                "<p>Droite : " + String(ticksD) + "</p>"
                "</body></html>";
  server.send(200, "text/html", page);
}

void handleTour() {
  if (server.hasArg("ticks")) {
    objectifTicks = server.arg("ticks").toInt();
  }
  faireTour();
  server.send(200, "text/plain", "Tour lancé pour " + String(objectifTicks) + " ticks");
}

void setup() {
  Serial.begin(115200);

  pinMode(IN1_G, OUTPUT); pinMode(IN2_G, OUTPUT); pinMode(EN_G, OUTPUT);
  pinMode(IN1_D, OUTPUT); pinMode(IN2_D, OUTPUT); pinMode(EN_D, OUTPUT);

  pinMode(ENC_G_CH_A, INPUT_PULLUP);
  pinMode(ENC_D_CH_A, INPUT_PULLUP);

  attachInterrupt(digitalPinToInterrupt(ENC_G_CH_A), onTickG, RISING);
  attachInterrupt(digitalPinToInterrupt(ENC_D_CH_A), onTickD, RISING);

  WiFi.softAP(ssid, password);
  Serial.print("Wi-Fi actif. IP : ");
  Serial.println(WiFi.softAPIP());

  server.on("/", handleRoot);
  server.on("/tour", handleTour);
  server.on("/stop", []() { arreter(); server.send(200, "text/plain", "Arrêté"); });

  server.begin();
}

void loop() {
  server.handleClient();

  if (tourEnCours && (ticksG >= objectifTicks || ticksD >= objectifTicks)) {
    arreter();
  }
}

    #include <WiFi.h>
#include <WebServer.h>

// Pins moteurs
#define IN1_G 17
#define IN2_G 16
#define EN_G  4
#define IN1_D 19
#define IN2_D 18
#define EN_D  23

// Pins encodeurs
#define ENC_G_CH_A 32
#define ENC_D_CH_A 27

volatile long ticksG = 0;
volatile long ticksD = 0;

const char* ssid = "GyroBot_WIFI";
const char* password = "12345678";

WebServer server(80);

long objectifTicks = 1500; // Nombre de ticks à atteindre
bool tourEnCours = false;

void IRAM_ATTR onTickG() { ticksG++; }
void IRAM_ATTR onTickD() { ticksD++; }

void faireTour() {
  ticksG = 0;
  ticksD = 0;
  tourEnCours = true;

  digitalWrite(IN1_G, HIGH); digitalWrite(IN2_G, LOW);
  digitalWrite(IN1_D, LOW);  digitalWrite(IN2_D, HIGH);
  analogWrite(EN_G, 255);
  analogWrite(EN_D, 255);
}

void arreter() {
  digitalWrite(IN1_G, LOW); digitalWrite(IN2_G, LOW);
  digitalWrite(IN1_D, LOW); digitalWrite(IN2_D, LOW);
  analogWrite(EN_G, 0);
  analogWrite(EN_D, 0);
  tourEnCours = false;
}

void handleRoot() {
  String page = "<html><body><h1>Mesure de Ticks - Tour Complet</h1>"
                "<form action=\"/tour\" method=\"get\">"
                "Objectif Ticks : <input type=\"number\" name=\"ticks\" value=\"" + String(objectifTicks) + "\">"
                "<input type=\"submit\" value=\"Lancer le tour\">"
                "</form>"
                "<p><a href=\"/stop\"><button>Stop</button></a></p>"
                "<h2>Ticks Actuels :</h2>"
                "<p>Gauche : " + String(ticksG) + "</p>"
                "<p>Droite : " + String(ticksD) + "</p>"
                "</body></html>";
  server.send(200, "text/html", page);
}

void handleTour() {
  if (server.hasArg("ticks")) {
    objectifTicks = server.arg("ticks").toInt();
  }
  faireTour();
  server.send(200, "text/plain", "Tour lancé pour " + String(objectifTicks) + " ticks");
}

void setup() {
  Serial.begin(115200);

  pinMode(IN1_G, OUTPUT); pinMode(IN2_G, OUTPUT); pinMode(EN_G, OUTPUT);
  pinMode(IN1_D, OUTPUT); pinMode(IN2_D, OUTPUT); pinMode(EN_D, OUTPUT);

  pinMode(ENC_G_CH_A, INPUT_PULLUP);
  pinMode(ENC_D_CH_A, INPUT_PULLUP);

  attachInterrupt(digitalPinToInterrupt(ENC_G_CH_A), onTickG, RISING);
  attachInterrupt(digitalPinToInterrupt(ENC_D_CH_A), onTickD, RISING);

  WiFi.softAP(ssid, password);
  Serial.print("Wi-Fi actif. IP : ");
  Serial.println(WiFi.softAPIP());

  server.on("/", handleRoot);
  server.on("/tour", handleTour);
  server.on("/stop", []() { arreter(); server.send(200, "text/plain", "Arrêté"); });

  server.begin();
}

void loop() {
  server.handleClient();

  if (tourEnCours && (ticksG >= objectifTicks || ticksD >= objectifTicks)) {
    arreter();
  }
}

      #include <WiFi.h>
#include <WebServer.h>

// Pins moteurs
#define IN1_G 17
#define IN2_G 16
#define EN_G  4
#define IN1_D 19
#define IN2_D 18
#define EN_D  23

// Pins encodeurs
#define ENC_G_CH_A 32
#define ENC_D_CH_A 27

volatile long ticksG = 0;
volatile long ticksD = 0;

const char* ssid = "GyroBot_WIFI";
const char* password = "12345678";

WebServer server(80);

long objectifTicks = 1500; // Nombre de ticks à atteindre
bool tourEnCours = false;

void IRAM_ATTR onTickG() { ticksG++; }
void IRAM_ATTR onTickD() { ticksD++; }

void faireTour() {
  ticksG = 0;
  ticksD = 0;
  tourEnCours = true;

  digitalWrite(IN1_G, HIGH); digitalWrite(IN2_G, LOW);
  digitalWrite(IN1_D, LOW);  digitalWrite(IN2_D, HIGH);
  analogWrite(EN_G, 255);
  analogWrite(EN_D, 255);
}

void arreter() {
  digitalWrite(IN1_G, LOW); digitalWrite(IN2_G, LOW);
  digitalWrite(IN1_D, LOW); digitalWrite(IN2_D, LOW);
  analogWrite(EN_G, 0);
  analogWrite(EN_D, 0);
  tourEnCours = false;
}

void handleRoot() {
  String page = "<html><body><h1>Mesure de Ticks - Tour Complet</h1>"
                "<form action=\"/tour\" method=\"get\">"
                "Objectif Ticks : <input type=\"number\" name=\"ticks\" value=\"" + String(objectifTicks) + "\">"
                "<input type=\"submit\" value=\"Lancer le tour\">"
                "</form>"
                "<p><a href=\"/stop\"><button>Stop</button></a></p>"
                "<h2>Ticks Actuels :</h2>"
                "<p>Gauche : " + String(ticksG) + "</p>"
                "<p>Droite : " + String(ticksD) + "</p>"
                "</body></html>";
  server.send(200, "text/html", page);
}

void handleTour() {
  if (server.hasArg("ticks")) {
    objectifTicks = server.arg("ticks").toInt();
  }
  faireTour();
  server.send(200, "text/plain", "Tour lancé pour " + String(objectifTicks) + " ticks");
}

void setup() {
  Serial.begin(115200);

  pinMode(IN1_G, OUTPUT); pinMode(IN2_G, OUTPUT); pinMode(EN_G, OUTPUT);
  pinMode(IN1_D, OUTPUT); pinMode(IN2_D, OUTPUT); pinMode(EN_D, OUTPUT);

  pinMode(ENC_G_CH_A, INPUT_PULLUP);
  pinMode(ENC_D_CH_A, INPUT_PULLUP);

  attachInterrupt(digitalPinToInterrupt(ENC_G_CH_A), onTickG, RISING);
  attachInterrupt(digitalPinToInterrupt(ENC_D_CH_A), onTickD, RISING);

  WiFi.softAP(ssid, password);
  Serial.print("Wi-Fi actif. IP : ");
  Serial.println(WiFi.softAPIP());

  server.on("/", handleRoot);
  server.on("/tour", handleTour);
  server.on("/stop", []() { arreter(); server.send(200, "text/plain", "Arrêté"); });

  server.begin();
}

void loop() {
  server.handleClient();

  if (tourEnCours && (ticksG >= objectifTicks || ticksD >= objectifTicks)) {
    arreter();
  }
}


      #include <WiFi.h>
#include <WebServer.h>

// Pins moteurs
#define IN1_G 17
#define IN2_G 16
#define EN_G  4
#define IN1_D 19
#define IN2_D 18
#define EN_D  23

// Pins encodeurs
#define ENC_G_CH_A 32
#define ENC_D_CH_A 27

volatile long ticksG = 0;
volatile long ticksD = 0;

const char* ssid = "GyroBot_WIFI";
const char* password = "12345678";

WebServer server(80);

long objectifTicks = 1500; // Nombre de ticks à atteindre
bool tourEnCours = false;

void IRAM_ATTR onTickG() { ticksG++; }
void IRAM_ATTR onTickD() { ticksD++; }

void faireTour() {
  ticksG = 0;
  ticksD = 0;
  tourEnCours = true;

  digitalWrite(IN1_G, HIGH); digitalWrite(IN2_G, LOW);
  digitalWrite(IN1_D, LOW);  digitalWrite(IN2_D, HIGH);
  analogWrite(EN_G, 255);
  analogWrite(EN_D, 255);
}

void arreter() {
  digitalWrite(IN1_G, LOW); digitalWrite(IN2_G, LOW);
  digitalWrite(IN1_D, LOW); digitalWrite(IN2_D, LOW);
  analogWrite(EN_G, 0);
  analogWrite(EN_D, 0);
  tourEnCours = false;
}

void handleRoot() {
  String page = "<html><body><h1>Mesure de Ticks - Tour Complet</h1>"
                "<form action=\"/tour\" method=\"get\">"
                "Objectif Ticks : <input type=\"number\" name=\"ticks\" value=\"" + String(objectifTicks) + "\">"
                "<input type=\"submit\" value=\"Lancer le tour\">"
                "</form>"
                "<p><a href=\"/stop\"><button>Stop</button></a></p>"
                "<h2>Ticks Actuels :</h2>"
                "<p>Gauche : " + String(ticksG) + "</p>"
                "<p>Droite : " + String(ticksD) + "</p>"
                "</body></html>";
  server.send(200, "text/html", page);
}

void handleTour() {
  if (server.hasArg("ticks")) {
    objectifTicks = server.arg("ticks").toInt();
  }
  faireTour();
  server.send(200, "text/plain", "Tour lancé pour " + String(objectifTicks) + " ticks");
}

void setup() {
  Serial.begin(115200);

  pinMode(IN1_G, OUTPUT); pinMode(IN2_G, OUTPUT); pinMode(EN_G, OUTPUT);
  pinMode(IN1_D, OUTPUT); pinMode(IN2_D, OUTPUT); pinMode(EN_D, OUTPUT);

  pinMode(ENC_G_CH_A, INPUT_PULLUP);
  pinMode(ENC_D_CH_A, INPUT_PULLUP);

  attachInterrupt(digitalPinToInterrupt(ENC_G_CH_A), onTickG, RISING);
  attachInterrupt(digitalPinToInterrupt(ENC_D_CH_A), onTickD, RISING);

  WiFi.softAP(ssid, password);
  Serial.print("Wi-Fi actif. IP : ");
  Serial.println(WiFi.softAPIP());

  server.on("/", handleRoot);
  server.on("/tour", handleTour);
  server.on("/stop", []() { arreter(); server.send(200, "text/plain", "Arrêté"); });

  server.begin();
}

void loop() {
  server.handleClient();

  if (tourEnCours && (ticksG >= objectifTicks || ticksD >= objectifTicks)) {
    arreter();
  }
}
                           
